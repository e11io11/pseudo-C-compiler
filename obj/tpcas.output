State 100 conflicts: 1 shift/reduce


Grammar

    0 $accept: Prog $end

    1 Prog: DeclVars DeclFoncts

    2 DeclVars: DeclVars TYPE Declarateurs ';'
    3         | %empty

    4 Declarateurs: Declarateurs ',' IDENT
    5             | IDENT

    6 DeclFoncts: DeclFoncts DeclFonct
    7           | DeclFonct

    8 DeclFonct: EnTeteFonct Corps

    9 EnTeteFonct: TYPE IDENT '(' Parametres ')'
   10            | VOID IDENT '(' Parametres ')'

   11 Parametres: VOID
   12           | ListTypVar

   13 ListTypVar: ListTypVar ',' TYPE IDENT
   14           | TYPE IDENT

   15 Corps: '{' DeclVars SuiteInstr '}'

   16 SuiteInstr: SuiteInstr Instr
   17           | %empty

   18 Instr: LValue '=' Exp ';'
   19      | IF '(' Exp ')' Instr
   20      | IF '(' Exp ')' Instr ELSE Instr
   21      | WHILE '(' Exp ')' Instr
   22      | IDENT '(' Arguments ')' ';'
   23      | RETURN Exp ';'
   24      | RETURN ';'
   25      | '{' SuiteInstr '}'
   26      | ';'

   27 Exp: Exp OR TB
   28    | TB

   29 TB: TB AND FB
   30   | FB

   31 FB: FB EQ M
   32   | M

   33 M: M ORDER E
   34  | E

   35 E: E ADDSUB T
   36  | T

   37 T: T DIVSTAR F
   38  | F

   39 F: ADDSUB F
   40  | '!' F
   41  | '(' Exp ')'
   42  | NUM
   43  | CHARACTER
   44  | LValue
   45  | IDENT '(' Arguments ')'

   46 LValue: IDENT

   47 Arguments: ListExp
   48          | %empty

   49 ListExp: ListExp ',' Exp
   50        | Exp


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 40
    '(' (40) 9 10 19 20 21 22 41 45
    ')' (41) 9 10 19 20 21 22 41 45
    ',' (44) 4 13 49
    ';' (59) 2 18 22 23 24 26
    '=' (61) 18
    '{' (123) 15 25
    '}' (125) 15 25
    error (256)
    DIVSTAR (258) 37
    IDENT (259) 4 5 9 10 13 14 22 45 46
    TYPE (260) 2 9 13 14
    VOID (261) 10 11
    WHILE (262) 21
    IF (263) 19 20
    RETURN (264) 23 24
    ELSE (265) 20
    OR (266) 27
    AND (267) 29
    EQ (268) 31
    ORDER (269) 33
    ADDSUB (270) 35 39
    NUM (271) 42
    CHARACTER (272) 43


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    Prog (27)
        on left: 1
        on right: 0
    DeclVars (28)
        on left: 2 3
        on right: 1 2 15
    Declarateurs (29)
        on left: 4 5
        on right: 2 4
    DeclFoncts (30)
        on left: 6 7
        on right: 1 6
    DeclFonct (31)
        on left: 8
        on right: 6 7
    EnTeteFonct (32)
        on left: 9 10
        on right: 8
    Parametres (33)
        on left: 11 12
        on right: 9 10
    ListTypVar (34)
        on left: 13 14
        on right: 12 13
    Corps (35)
        on left: 15
        on right: 8
    SuiteInstr (36)
        on left: 16 17
        on right: 15 16 25
    Instr (37)
        on left: 18 19 20 21 22 23 24 25 26
        on right: 16 19 20 21
    Exp (38)
        on left: 27 28
        on right: 18 19 20 21 23 27 41 49 50
    TB (39)
        on left: 29 30
        on right: 27 28 29
    FB (40)
        on left: 31 32
        on right: 29 30 31
    M (41)
        on left: 33 34
        on right: 31 32 33
    E (42)
        on left: 35 36
        on right: 33 34 35
    T (43)
        on left: 37 38
        on right: 35 36 37
    F (44)
        on left: 39 40 41 42 43 44 45
        on right: 37 38 39 40
    LValue (45)
        on left: 46
        on right: 18 44
    Arguments (46)
        on left: 47 48
        on right: 22 45
    ListExp (47)
        on left: 49 50
        on right: 47 49


State 0

    0 $accept: • Prog $end
    1 Prog: • DeclVars DeclFoncts
    2 DeclVars: • DeclVars TYPE Declarateurs ';'
    3         | • %empty

    $default  reduce using rule 3 (DeclVars)

    Prog      go to state 1
    DeclVars  go to state 2


State 1

    0 $accept: Prog • $end

    $end  shift, and go to state 3


State 2

    1 Prog: DeclVars • DeclFoncts
    2 DeclVars: DeclVars • TYPE Declarateurs ';'
    6 DeclFoncts: • DeclFoncts DeclFonct
    7           | • DeclFonct
    8 DeclFonct: • EnTeteFonct Corps
    9 EnTeteFonct: • TYPE IDENT '(' Parametres ')'
   10            | • VOID IDENT '(' Parametres ')'

    TYPE  shift, and go to state 4
    VOID  shift, and go to state 5

    DeclFoncts   go to state 6
    DeclFonct    go to state 7
    EnTeteFonct  go to state 8


State 3

    0 $accept: Prog $end •

    $default  accept


State 4

    2 DeclVars: DeclVars TYPE • Declarateurs ';'
    4 Declarateurs: • Declarateurs ',' IDENT
    5             | • IDENT
    9 EnTeteFonct: TYPE • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 9

    Declarateurs  go to state 10


State 5

   10 EnTeteFonct: VOID • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 11


State 6

    1 Prog: DeclVars DeclFoncts •  [$end]
    6 DeclFoncts: DeclFoncts • DeclFonct
    8 DeclFonct: • EnTeteFonct Corps
    9 EnTeteFonct: • TYPE IDENT '(' Parametres ')'
   10            | • VOID IDENT '(' Parametres ')'

    TYPE  shift, and go to state 12
    VOID  shift, and go to state 5

    $default  reduce using rule 1 (Prog)

    DeclFonct    go to state 13
    EnTeteFonct  go to state 8


State 7

    7 DeclFoncts: DeclFonct •

    $default  reduce using rule 7 (DeclFoncts)


State 8

    8 DeclFonct: EnTeteFonct • Corps
   15 Corps: • '{' DeclVars SuiteInstr '}'

    '{'  shift, and go to state 14

    Corps  go to state 15


State 9

    5 Declarateurs: IDENT •  [';', ',']
    9 EnTeteFonct: TYPE IDENT • '(' Parametres ')'

    '('  shift, and go to state 16

    $default  reduce using rule 5 (Declarateurs)


State 10

    2 DeclVars: DeclVars TYPE Declarateurs • ';'
    4 Declarateurs: Declarateurs • ',' IDENT

    ';'  shift, and go to state 17
    ','  shift, and go to state 18


State 11

   10 EnTeteFonct: VOID IDENT • '(' Parametres ')'

    '('  shift, and go to state 19


State 12

    9 EnTeteFonct: TYPE • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 20


State 13

    6 DeclFoncts: DeclFoncts DeclFonct •

    $default  reduce using rule 6 (DeclFoncts)


State 14

    2 DeclVars: • DeclVars TYPE Declarateurs ';'
    3         | • %empty
   15 Corps: '{' • DeclVars SuiteInstr '}'

    $default  reduce using rule 3 (DeclVars)

    DeclVars  go to state 21


State 15

    8 DeclFonct: EnTeteFonct Corps •

    $default  reduce using rule 8 (DeclFonct)


State 16

    9 EnTeteFonct: TYPE IDENT '(' • Parametres ')'
   11 Parametres: • VOID
   12           | • ListTypVar
   13 ListTypVar: • ListTypVar ',' TYPE IDENT
   14           | • TYPE IDENT

    TYPE  shift, and go to state 22
    VOID  shift, and go to state 23

    Parametres  go to state 24
    ListTypVar  go to state 25


State 17

    2 DeclVars: DeclVars TYPE Declarateurs ';' •

    $default  reduce using rule 2 (DeclVars)


State 18

    4 Declarateurs: Declarateurs ',' • IDENT

    IDENT  shift, and go to state 26


State 19

   10 EnTeteFonct: VOID IDENT '(' • Parametres ')'
   11 Parametres: • VOID
   12           | • ListTypVar
   13 ListTypVar: • ListTypVar ',' TYPE IDENT
   14           | • TYPE IDENT

    TYPE  shift, and go to state 22
    VOID  shift, and go to state 23

    Parametres  go to state 27
    ListTypVar  go to state 25


State 20

    9 EnTeteFonct: TYPE IDENT • '(' Parametres ')'

    '('  shift, and go to state 16


State 21

    2 DeclVars: DeclVars • TYPE Declarateurs ';'
   15 Corps: '{' DeclVars • SuiteInstr '}'
   16 SuiteInstr: • SuiteInstr Instr
   17           | • %empty  [IDENT, WHILE, IF, RETURN, ';', '{', '}']

    TYPE  shift, and go to state 28

    $default  reduce using rule 17 (SuiteInstr)

    SuiteInstr  go to state 29


State 22

   14 ListTypVar: TYPE • IDENT

    IDENT  shift, and go to state 30


State 23

   11 Parametres: VOID •

    $default  reduce using rule 11 (Parametres)


State 24

    9 EnTeteFonct: TYPE IDENT '(' Parametres • ')'

    ')'  shift, and go to state 31


State 25

   12 Parametres: ListTypVar •  [')']
   13 ListTypVar: ListTypVar • ',' TYPE IDENT

    ','  shift, and go to state 32

    $default  reduce using rule 12 (Parametres)


State 26

    4 Declarateurs: Declarateurs ',' IDENT •

    $default  reduce using rule 4 (Declarateurs)


State 27

   10 EnTeteFonct: VOID IDENT '(' Parametres • ')'

    ')'  shift, and go to state 33


State 28

    2 DeclVars: DeclVars TYPE • Declarateurs ';'
    4 Declarateurs: • Declarateurs ',' IDENT
    5             | • IDENT

    IDENT  shift, and go to state 34

    Declarateurs  go to state 10


State 29

   15 Corps: '{' DeclVars SuiteInstr • '}'
   16 SuiteInstr: SuiteInstr • Instr
   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   21      | • WHILE '(' Exp ')' Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   26      | • ';'
   46 LValue: • IDENT

    IDENT   shift, and go to state 35
    WHILE   shift, and go to state 36
    IF      shift, and go to state 37
    RETURN  shift, and go to state 38
    ';'     shift, and go to state 39
    '{'     shift, and go to state 40
    '}'     shift, and go to state 41

    Instr   go to state 42
    LValue  go to state 43


State 30

   14 ListTypVar: TYPE IDENT •

    $default  reduce using rule 14 (ListTypVar)


State 31

    9 EnTeteFonct: TYPE IDENT '(' Parametres ')' •

    $default  reduce using rule 9 (EnTeteFonct)


State 32

   13 ListTypVar: ListTypVar ',' • TYPE IDENT

    TYPE  shift, and go to state 44


State 33

   10 EnTeteFonct: VOID IDENT '(' Parametres ')' •

    $default  reduce using rule 10 (EnTeteFonct)


State 34

    5 Declarateurs: IDENT •

    $default  reduce using rule 5 (Declarateurs)


State 35

   22 Instr: IDENT • '(' Arguments ')' ';'
   46 LValue: IDENT •  ['=']

    '('  shift, and go to state 45

    $default  reduce using rule 46 (LValue)


State 36

   21 Instr: WHILE • '(' Exp ')' Instr

    '('  shift, and go to state 46


State 37

   19 Instr: IF • '(' Exp ')' Instr
   20      | IF • '(' Exp ')' Instr ELSE Instr

    '('  shift, and go to state 47


State 38

   23 Instr: RETURN • Exp ';'
   24      | RETURN • ';'
   27 Exp: • Exp OR TB
   28    | • TB
   29 TB: • TB AND FB
   30   | • FB
   31 FB: • FB EQ M
   32   | • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    ';'        shift, and go to state 52
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    Exp     go to state 55
    TB      go to state 56
    FB      go to state 57
    M       go to state 58
    E       go to state 59
    T       go to state 60
    F       go to state 61
    LValue  go to state 62


State 39

   26 Instr: ';' •

    $default  reduce using rule 26 (Instr)


State 40

   16 SuiteInstr: • SuiteInstr Instr
   17           | • %empty
   25 Instr: '{' • SuiteInstr '}'

    $default  reduce using rule 17 (SuiteInstr)

    SuiteInstr  go to state 63


State 41

   15 Corps: '{' DeclVars SuiteInstr '}' •

    $default  reduce using rule 15 (Corps)


State 42

   16 SuiteInstr: SuiteInstr Instr •

    $default  reduce using rule 16 (SuiteInstr)


State 43

   18 Instr: LValue • '=' Exp ';'

    '='  shift, and go to state 64


State 44

   13 ListTypVar: ListTypVar ',' TYPE • IDENT

    IDENT  shift, and go to state 65


State 45

   22 Instr: IDENT '(' • Arguments ')' ';'
   27 Exp: • Exp OR TB
   28    | • TB
   29 TB: • TB AND FB
   30   | • FB
   31 FB: • FB EQ M
   32   | • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT
   47 Arguments: • ListExp
   48          | • %empty  [')']
   49 ListExp: • ListExp ',' Exp
   50        | • Exp

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    $default  reduce using rule 48 (Arguments)

    Exp        go to state 66
    TB         go to state 56
    FB         go to state 57
    M          go to state 58
    E          go to state 59
    T          go to state 60
    F          go to state 61
    LValue     go to state 62
    Arguments  go to state 67
    ListExp    go to state 68


State 46

   21 Instr: WHILE '(' • Exp ')' Instr
   27 Exp: • Exp OR TB
   28    | • TB
   29 TB: • TB AND FB
   30   | • FB
   31 FB: • FB EQ M
   32   | • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    Exp     go to state 69
    TB      go to state 56
    FB      go to state 57
    M       go to state 58
    E       go to state 59
    T       go to state 60
    F       go to state 61
    LValue  go to state 62


State 47

   19 Instr: IF '(' • Exp ')' Instr
   20      | IF '(' • Exp ')' Instr ELSE Instr
   27 Exp: • Exp OR TB
   28    | • TB
   29 TB: • TB AND FB
   30   | • FB
   31 FB: • FB EQ M
   32   | • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    Exp     go to state 70
    TB      go to state 56
    FB      go to state 57
    M       go to state 58
    E       go to state 59
    T       go to state 60
    F       go to state 61
    LValue  go to state 62


State 48

   45 F: IDENT • '(' Arguments ')'
   46 LValue: IDENT •  [DIVSTAR, OR, AND, EQ, ORDER, ADDSUB, ';', ',', ')']

    '('  shift, and go to state 71

    $default  reduce using rule 46 (LValue)


State 49

   39 F: • ADDSUB F
   39  | ADDSUB • F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    F       go to state 72
    LValue  go to state 62


State 50

   42 F: NUM •

    $default  reduce using rule 42 (F)


State 51

   43 F: CHARACTER •

    $default  reduce using rule 43 (F)


State 52

   24 Instr: RETURN ';' •

    $default  reduce using rule 24 (Instr)


State 53

   27 Exp: • Exp OR TB
   28    | • TB
   29 TB: • TB AND FB
   30   | • FB
   31 FB: • FB EQ M
   32   | • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   41  | '(' • Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    Exp     go to state 73
    TB      go to state 56
    FB      go to state 57
    M       go to state 58
    E       go to state 59
    T       go to state 60
    F       go to state 61
    LValue  go to state 62


State 54

   39 F: • ADDSUB F
   40  | • '!' F
   40  | '!' • F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    F       go to state 74
    LValue  go to state 62


State 55

   23 Instr: RETURN Exp • ';'
   27 Exp: Exp • OR TB

    OR   shift, and go to state 75
    ';'  shift, and go to state 76


State 56

   28 Exp: TB •  [OR, ';', ',', ')']
   29 TB: TB • AND FB

    AND  shift, and go to state 77

    $default  reduce using rule 28 (Exp)


State 57

   30 TB: FB •  [OR, AND, ';', ',', ')']
   31 FB: FB • EQ M

    EQ  shift, and go to state 78

    $default  reduce using rule 30 (TB)


State 58

   32 FB: M •  [OR, AND, EQ, ';', ',', ')']
   33 M: M • ORDER E

    ORDER  shift, and go to state 79

    $default  reduce using rule 32 (FB)


State 59

   34 M: E •  [OR, AND, EQ, ORDER, ';', ',', ')']
   35 E: E • ADDSUB T

    ADDSUB  shift, and go to state 80

    $default  reduce using rule 34 (M)


State 60

   36 E: T •  [OR, AND, EQ, ORDER, ADDSUB, ';', ',', ')']
   37 T: T • DIVSTAR F

    DIVSTAR  shift, and go to state 81

    $default  reduce using rule 36 (E)


State 61

   38 T: F •

    $default  reduce using rule 38 (T)


State 62

   44 F: LValue •

    $default  reduce using rule 44 (F)


State 63

   16 SuiteInstr: SuiteInstr • Instr
   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   21      | • WHILE '(' Exp ')' Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   25      | '{' SuiteInstr • '}'
   26      | • ';'
   46 LValue: • IDENT

    IDENT   shift, and go to state 35
    WHILE   shift, and go to state 36
    IF      shift, and go to state 37
    RETURN  shift, and go to state 38
    ';'     shift, and go to state 39
    '{'     shift, and go to state 40
    '}'     shift, and go to state 82

    Instr   go to state 42
    LValue  go to state 43


State 64

   18 Instr: LValue '=' • Exp ';'
   27 Exp: • Exp OR TB
   28    | • TB
   29 TB: • TB AND FB
   30   | • FB
   31 FB: • FB EQ M
   32   | • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    Exp     go to state 83
    TB      go to state 56
    FB      go to state 57
    M       go to state 58
    E       go to state 59
    T       go to state 60
    F       go to state 61
    LValue  go to state 62


State 65

   13 ListTypVar: ListTypVar ',' TYPE IDENT •

    $default  reduce using rule 13 (ListTypVar)


State 66

   27 Exp: Exp • OR TB
   50 ListExp: Exp •  [',', ')']

    OR  shift, and go to state 75

    $default  reduce using rule 50 (ListExp)


State 67

   22 Instr: IDENT '(' Arguments • ')' ';'

    ')'  shift, and go to state 84


State 68

   47 Arguments: ListExp •  [')']
   49 ListExp: ListExp • ',' Exp

    ','  shift, and go to state 85

    $default  reduce using rule 47 (Arguments)


State 69

   21 Instr: WHILE '(' Exp • ')' Instr
   27 Exp: Exp • OR TB

    OR   shift, and go to state 75
    ')'  shift, and go to state 86


State 70

   19 Instr: IF '(' Exp • ')' Instr
   20      | IF '(' Exp • ')' Instr ELSE Instr
   27 Exp: Exp • OR TB

    OR   shift, and go to state 75
    ')'  shift, and go to state 87


State 71

   27 Exp: • Exp OR TB
   28    | • TB
   29 TB: • TB AND FB
   30   | • FB
   31 FB: • FB EQ M
   32   | • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   45  | IDENT '(' • Arguments ')'
   46 LValue: • IDENT
   47 Arguments: • ListExp
   48          | • %empty  [')']
   49 ListExp: • ListExp ',' Exp
   50        | • Exp

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    $default  reduce using rule 48 (Arguments)

    Exp        go to state 66
    TB         go to state 56
    FB         go to state 57
    M          go to state 58
    E          go to state 59
    T          go to state 60
    F          go to state 61
    LValue     go to state 62
    Arguments  go to state 88
    ListExp    go to state 68


State 72

   39 F: ADDSUB F •

    $default  reduce using rule 39 (F)


State 73

   27 Exp: Exp • OR TB
   41 F: '(' Exp • ')'

    OR   shift, and go to state 75
    ')'  shift, and go to state 89


State 74

   40 F: '!' F •

    $default  reduce using rule 40 (F)


State 75

   27 Exp: Exp OR • TB
   29 TB: • TB AND FB
   30   | • FB
   31 FB: • FB EQ M
   32   | • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    TB      go to state 90
    FB      go to state 57
    M       go to state 58
    E       go to state 59
    T       go to state 60
    F       go to state 61
    LValue  go to state 62


State 76

   23 Instr: RETURN Exp ';' •

    $default  reduce using rule 23 (Instr)


State 77

   29 TB: TB AND • FB
   31 FB: • FB EQ M
   32   | • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    FB      go to state 91
    M       go to state 58
    E       go to state 59
    T       go to state 60
    F       go to state 61
    LValue  go to state 62


State 78

   31 FB: FB EQ • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    M       go to state 92
    E       go to state 59
    T       go to state 60
    F       go to state 61
    LValue  go to state 62


State 79

   33 M: M ORDER • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    E       go to state 93
    T       go to state 60
    F       go to state 61
    LValue  go to state 62


State 80

   35 E: E ADDSUB • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    T       go to state 94
    F       go to state 61
    LValue  go to state 62


State 81

   37 T: T DIVSTAR • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    F       go to state 95
    LValue  go to state 62


State 82

   25 Instr: '{' SuiteInstr '}' •

    $default  reduce using rule 25 (Instr)


State 83

   18 Instr: LValue '=' Exp • ';'
   27 Exp: Exp • OR TB

    OR   shift, and go to state 75
    ';'  shift, and go to state 96


State 84

   22 Instr: IDENT '(' Arguments ')' • ';'

    ';'  shift, and go to state 97


State 85

   27 Exp: • Exp OR TB
   28    | • TB
   29 TB: • TB AND FB
   30   | • FB
   31 FB: • FB EQ M
   32   | • M
   33 M: • M ORDER E
   34  | • E
   35 E: • E ADDSUB T
   36  | • T
   37 T: • T DIVSTAR F
   38  | • F
   39 F: • ADDSUB F
   40  | • '!' F
   41  | • '(' Exp ')'
   42  | • NUM
   43  | • CHARACTER
   44  | • LValue
   45  | • IDENT '(' Arguments ')'
   46 LValue: • IDENT
   49 ListExp: ListExp ',' • Exp

    IDENT      shift, and go to state 48
    ADDSUB     shift, and go to state 49
    NUM        shift, and go to state 50
    CHARACTER  shift, and go to state 51
    '('        shift, and go to state 53
    '!'        shift, and go to state 54

    Exp     go to state 98
    TB      go to state 56
    FB      go to state 57
    M       go to state 58
    E       go to state 59
    T       go to state 60
    F       go to state 61
    LValue  go to state 62


State 86

   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   21      | • WHILE '(' Exp ')' Instr
   21      | WHILE '(' Exp ')' • Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   26      | • ';'
   46 LValue: • IDENT

    IDENT   shift, and go to state 35
    WHILE   shift, and go to state 36
    IF      shift, and go to state 37
    RETURN  shift, and go to state 38
    ';'     shift, and go to state 39
    '{'     shift, and go to state 40

    Instr   go to state 99
    LValue  go to state 43


State 87

   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   19      | IF '(' Exp ')' • Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   20      | IF '(' Exp ')' • Instr ELSE Instr
   21      | • WHILE '(' Exp ')' Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   26      | • ';'
   46 LValue: • IDENT

    IDENT   shift, and go to state 35
    WHILE   shift, and go to state 36
    IF      shift, and go to state 37
    RETURN  shift, and go to state 38
    ';'     shift, and go to state 39
    '{'     shift, and go to state 40

    Instr   go to state 100
    LValue  go to state 43


State 88

   45 F: IDENT '(' Arguments • ')'

    ')'  shift, and go to state 101


State 89

   41 F: '(' Exp ')' •

    $default  reduce using rule 41 (F)


State 90

   27 Exp: Exp OR TB •  [OR, ';', ',', ')']
   29 TB: TB • AND FB

    AND  shift, and go to state 77

    $default  reduce using rule 27 (Exp)


State 91

   29 TB: TB AND FB •  [OR, AND, ';', ',', ')']
   31 FB: FB • EQ M

    EQ  shift, and go to state 78

    $default  reduce using rule 29 (TB)


State 92

   31 FB: FB EQ M •  [OR, AND, EQ, ';', ',', ')']
   33 M: M • ORDER E

    ORDER  shift, and go to state 79

    $default  reduce using rule 31 (FB)


State 93

   33 M: M ORDER E •  [OR, AND, EQ, ORDER, ';', ',', ')']
   35 E: E • ADDSUB T

    ADDSUB  shift, and go to state 80

    $default  reduce using rule 33 (M)


State 94

   35 E: E ADDSUB T •  [OR, AND, EQ, ORDER, ADDSUB, ';', ',', ')']
   37 T: T • DIVSTAR F

    DIVSTAR  shift, and go to state 81

    $default  reduce using rule 35 (E)


State 95

   37 T: T DIVSTAR F •

    $default  reduce using rule 37 (T)


State 96

   18 Instr: LValue '=' Exp ';' •

    $default  reduce using rule 18 (Instr)


State 97

   22 Instr: IDENT '(' Arguments ')' ';' •

    $default  reduce using rule 22 (Instr)


State 98

   27 Exp: Exp • OR TB
   49 ListExp: ListExp ',' Exp •  [',', ')']

    OR  shift, and go to state 75

    $default  reduce using rule 49 (ListExp)


State 99

   21 Instr: WHILE '(' Exp ')' Instr •

    $default  reduce using rule 21 (Instr)


State 100

   19 Instr: IF '(' Exp ')' Instr •  [IDENT, WHILE, IF, RETURN, ELSE, ';', '{', '}']
   20      | IF '(' Exp ')' Instr • ELSE Instr

    ELSE  shift, and go to state 102

    ELSE      [reduce using rule 19 (Instr)]
    $default  reduce using rule 19 (Instr)

    shift/reduce conflict on token ELSE:
       19 Instr: IF '(' Exp ')' Instr •
       20 Instr: IF '(' Exp ')' Instr • ELSE Instr
      Example: IF '(' Exp ')' IF '(' Exp ')' Instr • ELSE Instr
      Shift derivation
        Instr
        ↳ IF '(' Exp ')' Instr
                         ↳ IF '(' Exp ')' Instr • ELSE Instr
      Reduce derivation
        Instr
        ↳ IF '(' Exp ')' Instr                    ELSE Instr
                         ↳ IF '(' Exp ')' Instr •



State 101

   45 F: IDENT '(' Arguments ')' •

    $default  reduce using rule 45 (F)


State 102

   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   20      | IF '(' Exp ')' Instr ELSE • Instr
   21      | • WHILE '(' Exp ')' Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   26      | • ';'
   46 LValue: • IDENT

    IDENT   shift, and go to state 35
    WHILE   shift, and go to state 36
    IF      shift, and go to state 37
    RETURN  shift, and go to state 38
    ';'     shift, and go to state 39
    '{'     shift, and go to state 40

    Instr   go to state 103
    LValue  go to state 43


State 103

   20 Instr: IF '(' Exp ')' Instr ELSE Instr •

    $default  reduce using rule 20 (Instr)
