Grammar

    0 $accept: Prog $end

    1 Prog: DeclVars DeclFoncts

    2 DeclVars: DeclVars TYPE Declarateurs ';'
    3         | %empty

    4 Declarateurs: Declarateurs ',' IDENT
    5             | IDENT

    6 DeclFoncts: DeclFoncts DeclFonct
    7           | DeclFonct

    8 DeclFonct: EnTeteFonct Corps

    9 EnTeteFonct: TYPE IDENT '(' Parametres ')'
   10            | VOID IDENT '(' Parametres ')'

   11 Parametres: VOID
   12           | ListTypVar

   13 ListTypVar: ListTypVar ',' TYPE IDENT
   14           | TYPE IDENT

   15 Corps: '{' DeclVars SuiteInstr '}'

   16 SuiteInstr: SuiteInstr Instr
   17           | %empty

   18 Instr: LValue '=' Exp ';'
   19      | IF '(' Exp ')' Instr
   20      | IF '(' Exp ')' Instr ELSE Instr
   21      | WHILE '(' Exp ')' Instr
   22      | IDENT '(' Arguments ')' ';'
   23      | RETURN Exp ';'
   24      | RETURN ';'
   25      | '{' SuiteInstr '}'
   26      | ';'
   27      | Switch

   28 Exp: Exp OR TB
   29    | TB

   30 TB: TB AND FB
   31   | FB

   32 FB: FB EQ M
   33   | M

   34 M: M ORDER E
   35  | E

   36 E: E ADDSUB T
   37  | T

   38 T: T DIVSTAR F
   39  | F

   40 F: ADDSUB F
   41  | '!' F
   42  | '(' Exp ')'
   43  | NUM
   44  | CHARACTER
   45  | LValue
   46  | IDENT '(' Arguments ')'

   47 LValue: IDENT

   48 Arguments: ListExp
   49          | %empty

   50 ListExp: ListExp ',' Exp
   51        | Exp

   52 Switch: EnTeteSwitch CorpsSwitch

   53 EnTeteSwitch: SWITCH '(' Exp ')'

   54 CorpsSwitch: '{' SuiteSwitch SwitchEndElement '}'
   55            | '{' '}'

   56 SuiteSwitch: SuiteSwitch SwitchElement
   57            | %empty

   58 SwitchElement: CASE Exp ':'
   59              | DEFAULT ':'
   60              | BREAK ';'
   61              | Instr

   62 SwitchEndElement: BREAK ';'
   63                 | Instr


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 41
    '(' (40) 9 10 19 20 21 22 42 46 53
    ')' (41) 9 10 19 20 21 22 42 46 53
    ',' (44) 4 13 50
    ':' (58) 58 59
    ';' (59) 2 18 22 23 24 26 60 62
    '=' (61) 18
    '{' (123) 15 25 54 55
    '}' (125) 15 25 54 55
    error (256)
    CHARACTER <byte> (258) 44
    ADDSUB <byte> (259) 36 40
    DIVSTAR <byte> (260) 38
    NUM <num> (261) 43
    IDENT <ident> (262) 4 5 9 10 13 14 22 46 47
    ORDER <comp> (263) 34
    EQ <comp> (264) 32
    TYPE <comp> (265) 2 9 13 14
    OR (266) 28
    AND (267) 30
    IF (268) 19 20
    WHILE (269) 21
    RETURN (270) 23 24
    VOID (271) 10 11
    ELSE (272) 20
    CASE (273) 58
    BREAK (274) 60 62
    SWITCH (275) 53
    DEFAULT (276) 59


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    Prog <node> (32)
        on left: 1
        on right: 0
    DeclVars <node> (33)
        on left: 2 3
        on right: 1 2 15
    Declarateurs <node> (34)
        on left: 4 5
        on right: 2 4
    DeclFoncts <node> (35)
        on left: 6 7
        on right: 1 6
    DeclFonct <node> (36)
        on left: 8
        on right: 6 7
    EnTeteFonct <node> (37)
        on left: 9 10
        on right: 8
    Parametres <node> (38)
        on left: 11 12
        on right: 9 10
    ListTypVar <node> (39)
        on left: 13 14
        on right: 12 13
    Corps <node> (40)
        on left: 15
        on right: 8
    SuiteInstr <node> (41)
        on left: 16 17
        on right: 15 16 25
    Instr <node> (42)
        on left: 18 19 20 21 22 23 24 25 26 27
        on right: 16 19 20 21 61 63
    Exp <node> (43)
        on left: 28 29
        on right: 18 19 20 21 23 28 42 50 51 53 58
    TB <node> (44)
        on left: 30 31
        on right: 28 29 30
    FB <node> (45)
        on left: 32 33
        on right: 30 31 32
    M <node> (46)
        on left: 34 35
        on right: 32 33 34
    E <node> (47)
        on left: 36 37
        on right: 34 35 36
    T <node> (48)
        on left: 38 39
        on right: 36 37 38
    F <node> (49)
        on left: 40 41 42 43 44 45 46
        on right: 38 39 40 41
    LValue <node> (50)
        on left: 47
        on right: 18 45
    Arguments <node> (51)
        on left: 48 49
        on right: 22 46
    ListExp <node> (52)
        on left: 50 51
        on right: 48 50
    Switch <node> (53)
        on left: 52
        on right: 27
    EnTeteSwitch <node> (54)
        on left: 53
        on right: 52
    CorpsSwitch <node> (55)
        on left: 54 55
        on right: 52
    SuiteSwitch <node> (56)
        on left: 56 57
        on right: 54 56
    SwitchElement <node> (57)
        on left: 58 59 60 61
        on right: 56
    SwitchEndElement <node> (58)
        on left: 62 63
        on right: 54


State 0

    0 $accept: • Prog $end
    1 Prog: • DeclVars DeclFoncts
    2 DeclVars: • DeclVars TYPE Declarateurs ';'
    3         | • %empty

    $default  reduce using rule 3 (DeclVars)

    Prog      go to state 1
    DeclVars  go to state 2


State 1

    0 $accept: Prog • $end

    $end  shift, and go to state 3


State 2

    1 Prog: DeclVars • DeclFoncts
    2 DeclVars: DeclVars • TYPE Declarateurs ';'
    6 DeclFoncts: • DeclFoncts DeclFonct
    7           | • DeclFonct
    8 DeclFonct: • EnTeteFonct Corps
    9 EnTeteFonct: • TYPE IDENT '(' Parametres ')'
   10            | • VOID IDENT '(' Parametres ')'

    TYPE  shift, and go to state 4
    VOID  shift, and go to state 5

    DeclFoncts   go to state 6
    DeclFonct    go to state 7
    EnTeteFonct  go to state 8


State 3

    0 $accept: Prog $end •

    $default  accept


State 4

    2 DeclVars: DeclVars TYPE • Declarateurs ';'
    4 Declarateurs: • Declarateurs ',' IDENT
    5             | • IDENT
    9 EnTeteFonct: TYPE • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 9

    Declarateurs  go to state 10


State 5

   10 EnTeteFonct: VOID • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 11


State 6

    1 Prog: DeclVars DeclFoncts •  [$end]
    6 DeclFoncts: DeclFoncts • DeclFonct
    8 DeclFonct: • EnTeteFonct Corps
    9 EnTeteFonct: • TYPE IDENT '(' Parametres ')'
   10            | • VOID IDENT '(' Parametres ')'

    TYPE  shift, and go to state 12
    VOID  shift, and go to state 5

    $default  reduce using rule 1 (Prog)

    DeclFonct    go to state 13
    EnTeteFonct  go to state 8


State 7

    7 DeclFoncts: DeclFonct •

    $default  reduce using rule 7 (DeclFoncts)


State 8

    8 DeclFonct: EnTeteFonct • Corps
   15 Corps: • '{' DeclVars SuiteInstr '}'

    '{'  shift, and go to state 14

    Corps  go to state 15


State 9

    5 Declarateurs: IDENT •  [';', ',']
    9 EnTeteFonct: TYPE IDENT • '(' Parametres ')'

    '('  shift, and go to state 16

    $default  reduce using rule 5 (Declarateurs)


State 10

    2 DeclVars: DeclVars TYPE Declarateurs • ';'
    4 Declarateurs: Declarateurs • ',' IDENT

    ';'  shift, and go to state 17
    ','  shift, and go to state 18


State 11

   10 EnTeteFonct: VOID IDENT • '(' Parametres ')'

    '('  shift, and go to state 19


State 12

    9 EnTeteFonct: TYPE • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 20


State 13

    6 DeclFoncts: DeclFoncts DeclFonct •

    $default  reduce using rule 6 (DeclFoncts)


State 14

    2 DeclVars: • DeclVars TYPE Declarateurs ';'
    3         | • %empty
   15 Corps: '{' • DeclVars SuiteInstr '}'

    $default  reduce using rule 3 (DeclVars)

    DeclVars  go to state 21


State 15

    8 DeclFonct: EnTeteFonct Corps •

    $default  reduce using rule 8 (DeclFonct)


State 16

    9 EnTeteFonct: TYPE IDENT '(' • Parametres ')'
   11 Parametres: • VOID
   12           | • ListTypVar
   13 ListTypVar: • ListTypVar ',' TYPE IDENT
   14           | • TYPE IDENT

    TYPE  shift, and go to state 22
    VOID  shift, and go to state 23

    Parametres  go to state 24
    ListTypVar  go to state 25


State 17

    2 DeclVars: DeclVars TYPE Declarateurs ';' •

    $default  reduce using rule 2 (DeclVars)


State 18

    4 Declarateurs: Declarateurs ',' • IDENT

    IDENT  shift, and go to state 26


State 19

   10 EnTeteFonct: VOID IDENT '(' • Parametres ')'
   11 Parametres: • VOID
   12           | • ListTypVar
   13 ListTypVar: • ListTypVar ',' TYPE IDENT
   14           | • TYPE IDENT

    TYPE  shift, and go to state 22
    VOID  shift, and go to state 23

    Parametres  go to state 27
    ListTypVar  go to state 25


State 20

    9 EnTeteFonct: TYPE IDENT • '(' Parametres ')'

    '('  shift, and go to state 16


State 21

    2 DeclVars: DeclVars • TYPE Declarateurs ';'
   15 Corps: '{' DeclVars • SuiteInstr '}'
   16 SuiteInstr: • SuiteInstr Instr
   17           | • %empty  [IDENT, IF, WHILE, RETURN, SWITCH, ';', '{', '}']

    TYPE  shift, and go to state 28

    $default  reduce using rule 17 (SuiteInstr)

    SuiteInstr  go to state 29


State 22

   14 ListTypVar: TYPE • IDENT

    IDENT  shift, and go to state 30


State 23

   11 Parametres: VOID •

    $default  reduce using rule 11 (Parametres)


State 24

    9 EnTeteFonct: TYPE IDENT '(' Parametres • ')'

    ')'  shift, and go to state 31


State 25

   12 Parametres: ListTypVar •  [')']
   13 ListTypVar: ListTypVar • ',' TYPE IDENT

    ','  shift, and go to state 32

    $default  reduce using rule 12 (Parametres)


State 26

    4 Declarateurs: Declarateurs ',' IDENT •

    $default  reduce using rule 4 (Declarateurs)


State 27

   10 EnTeteFonct: VOID IDENT '(' Parametres • ')'

    ')'  shift, and go to state 33


State 28

    2 DeclVars: DeclVars TYPE • Declarateurs ';'
    4 Declarateurs: • Declarateurs ',' IDENT
    5             | • IDENT

    IDENT  shift, and go to state 34

    Declarateurs  go to state 10


State 29

   15 Corps: '{' DeclVars SuiteInstr • '}'
   16 SuiteInstr: SuiteInstr • Instr
   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   21      | • WHILE '(' Exp ')' Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   26      | • ';'
   27      | • Switch
   47 LValue: • IDENT
   52 Switch: • EnTeteSwitch CorpsSwitch
   53 EnTeteSwitch: • SWITCH '(' Exp ')'

    IDENT   shift, and go to state 35
    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    RETURN  shift, and go to state 38
    SWITCH  shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41
    '}'     shift, and go to state 42

    Instr         go to state 43
    LValue        go to state 44
    Switch        go to state 45
    EnTeteSwitch  go to state 46


State 30

   14 ListTypVar: TYPE IDENT •

    $default  reduce using rule 14 (ListTypVar)


State 31

    9 EnTeteFonct: TYPE IDENT '(' Parametres ')' •

    $default  reduce using rule 9 (EnTeteFonct)


State 32

   13 ListTypVar: ListTypVar ',' • TYPE IDENT

    TYPE  shift, and go to state 47


State 33

   10 EnTeteFonct: VOID IDENT '(' Parametres ')' •

    $default  reduce using rule 10 (EnTeteFonct)


State 34

    5 Declarateurs: IDENT •

    $default  reduce using rule 5 (Declarateurs)


State 35

   22 Instr: IDENT • '(' Arguments ')' ';'
   47 LValue: IDENT •  ['=']

    '('  shift, and go to state 48

    $default  reduce using rule 47 (LValue)


State 36

   19 Instr: IF • '(' Exp ')' Instr
   20      | IF • '(' Exp ')' Instr ELSE Instr

    '('  shift, and go to state 49


State 37

   21 Instr: WHILE • '(' Exp ')' Instr

    '('  shift, and go to state 50


State 38

   23 Instr: RETURN • Exp ';'
   24      | RETURN • ';'
   28 Exp: • Exp OR TB
   29    | • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    ';'        shift, and go to state 55
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp     go to state 58
    TB      go to state 59
    FB      go to state 60
    M       go to state 61
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 39

   53 EnTeteSwitch: SWITCH • '(' Exp ')'

    '('  shift, and go to state 66


State 40

   26 Instr: ';' •

    $default  reduce using rule 26 (Instr)


State 41

   16 SuiteInstr: • SuiteInstr Instr
   17           | • %empty
   25 Instr: '{' • SuiteInstr '}'

    $default  reduce using rule 17 (SuiteInstr)

    SuiteInstr  go to state 67


State 42

   15 Corps: '{' DeclVars SuiteInstr '}' •

    $default  reduce using rule 15 (Corps)


State 43

   16 SuiteInstr: SuiteInstr Instr •

    $default  reduce using rule 16 (SuiteInstr)


State 44

   18 Instr: LValue • '=' Exp ';'

    '='  shift, and go to state 68


State 45

   27 Instr: Switch •

    $default  reduce using rule 27 (Instr)


State 46

   52 Switch: EnTeteSwitch • CorpsSwitch
   54 CorpsSwitch: • '{' SuiteSwitch SwitchEndElement '}'
   55            | • '{' '}'

    '{'  shift, and go to state 69

    CorpsSwitch  go to state 70


State 47

   13 ListTypVar: ListTypVar ',' TYPE • IDENT

    IDENT  shift, and go to state 71


State 48

   22 Instr: IDENT '(' • Arguments ')' ';'
   28 Exp: • Exp OR TB
   29    | • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT
   48 Arguments: • ListExp
   49          | • %empty  [')']
   50 ListExp: • ListExp ',' Exp
   51        | • Exp

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    $default  reduce using rule 49 (Arguments)

    Exp        go to state 72
    TB         go to state 59
    FB         go to state 60
    M          go to state 61
    E          go to state 62
    T          go to state 63
    F          go to state 64
    LValue     go to state 65
    Arguments  go to state 73
    ListExp    go to state 74


State 49

   19 Instr: IF '(' • Exp ')' Instr
   20      | IF '(' • Exp ')' Instr ELSE Instr
   28 Exp: • Exp OR TB
   29    | • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp     go to state 75
    TB      go to state 59
    FB      go to state 60
    M       go to state 61
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 50

   21 Instr: WHILE '(' • Exp ')' Instr
   28 Exp: • Exp OR TB
   29    | • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp     go to state 76
    TB      go to state 59
    FB      go to state 60
    M       go to state 61
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 51

   44 F: CHARACTER •

    $default  reduce using rule 44 (F)


State 52

   40 F: • ADDSUB F
   40  | ADDSUB • F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    F       go to state 77
    LValue  go to state 65


State 53

   43 F: NUM •

    $default  reduce using rule 43 (F)


State 54

   46 F: IDENT • '(' Arguments ')'
   47 LValue: IDENT •  [ADDSUB, DIVSTAR, ORDER, EQ, OR, AND, ')', ';', ',', ':']

    '('  shift, and go to state 78

    $default  reduce using rule 47 (LValue)


State 55

   24 Instr: RETURN ';' •

    $default  reduce using rule 24 (Instr)


State 56

   28 Exp: • Exp OR TB
   29    | • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   42  | '(' • Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp     go to state 79
    TB      go to state 59
    FB      go to state 60
    M       go to state 61
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 57

   40 F: • ADDSUB F
   41  | • '!' F
   41  | '!' • F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    F       go to state 80
    LValue  go to state 65


State 58

   23 Instr: RETURN Exp • ';'
   28 Exp: Exp • OR TB

    OR   shift, and go to state 81
    ';'  shift, and go to state 82


State 59

   29 Exp: TB •  [OR, ')', ';', ',', ':']
   30 TB: TB • AND FB

    AND  shift, and go to state 83

    $default  reduce using rule 29 (Exp)


State 60

   31 TB: FB •  [OR, AND, ')', ';', ',', ':']
   32 FB: FB • EQ M

    EQ  shift, and go to state 84

    $default  reduce using rule 31 (TB)


State 61

   33 FB: M •  [EQ, OR, AND, ')', ';', ',', ':']
   34 M: M • ORDER E

    ORDER  shift, and go to state 85

    $default  reduce using rule 33 (FB)


State 62

   35 M: E •  [ORDER, EQ, OR, AND, ')', ';', ',', ':']
   36 E: E • ADDSUB T

    ADDSUB  shift, and go to state 86

    $default  reduce using rule 35 (M)


State 63

   37 E: T •  [ADDSUB, ORDER, EQ, OR, AND, ')', ';', ',', ':']
   38 T: T • DIVSTAR F

    DIVSTAR  shift, and go to state 87

    $default  reduce using rule 37 (E)


State 64

   39 T: F •

    $default  reduce using rule 39 (T)


State 65

   45 F: LValue •

    $default  reduce using rule 45 (F)


State 66

   28 Exp: • Exp OR TB
   29    | • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT
   53 EnTeteSwitch: SWITCH '(' • Exp ')'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp     go to state 88
    TB      go to state 59
    FB      go to state 60
    M       go to state 61
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 67

   16 SuiteInstr: SuiteInstr • Instr
   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   21      | • WHILE '(' Exp ')' Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   25      | '{' SuiteInstr • '}'
   26      | • ';'
   27      | • Switch
   47 LValue: • IDENT
   52 Switch: • EnTeteSwitch CorpsSwitch
   53 EnTeteSwitch: • SWITCH '(' Exp ')'

    IDENT   shift, and go to state 35
    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    RETURN  shift, and go to state 38
    SWITCH  shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41
    '}'     shift, and go to state 89

    Instr         go to state 43
    LValue        go to state 44
    Switch        go to state 45
    EnTeteSwitch  go to state 46


State 68

   18 Instr: LValue '=' • Exp ';'
   28 Exp: • Exp OR TB
   29    | • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp     go to state 90
    TB      go to state 59
    FB      go to state 60
    M       go to state 61
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 69

   54 CorpsSwitch: '{' • SuiteSwitch SwitchEndElement '}'
   55            | '{' • '}'
   56 SuiteSwitch: • SuiteSwitch SwitchElement
   57            | • %empty  [IDENT, IF, WHILE, RETURN, CASE, BREAK, SWITCH, DEFAULT, ';', '{']

    '}'  shift, and go to state 91

    $default  reduce using rule 57 (SuiteSwitch)

    SuiteSwitch  go to state 92


State 70

   52 Switch: EnTeteSwitch CorpsSwitch •

    $default  reduce using rule 52 (Switch)


State 71

   13 ListTypVar: ListTypVar ',' TYPE IDENT •

    $default  reduce using rule 13 (ListTypVar)


State 72

   28 Exp: Exp • OR TB
   51 ListExp: Exp •  [')', ',']

    OR  shift, and go to state 81

    $default  reduce using rule 51 (ListExp)


State 73

   22 Instr: IDENT '(' Arguments • ')' ';'

    ')'  shift, and go to state 93


State 74

   48 Arguments: ListExp •  [')']
   50 ListExp: ListExp • ',' Exp

    ','  shift, and go to state 94

    $default  reduce using rule 48 (Arguments)


State 75

   19 Instr: IF '(' Exp • ')' Instr
   20      | IF '(' Exp • ')' Instr ELSE Instr
   28 Exp: Exp • OR TB

    OR   shift, and go to state 81
    ')'  shift, and go to state 95


State 76

   21 Instr: WHILE '(' Exp • ')' Instr
   28 Exp: Exp • OR TB

    OR   shift, and go to state 81
    ')'  shift, and go to state 96


State 77

   40 F: ADDSUB F •

    $default  reduce using rule 40 (F)


State 78

   28 Exp: • Exp OR TB
   29    | • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   46  | IDENT '(' • Arguments ')'
   47 LValue: • IDENT
   48 Arguments: • ListExp
   49          | • %empty  [')']
   50 ListExp: • ListExp ',' Exp
   51        | • Exp

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    $default  reduce using rule 49 (Arguments)

    Exp        go to state 72
    TB         go to state 59
    FB         go to state 60
    M          go to state 61
    E          go to state 62
    T          go to state 63
    F          go to state 64
    LValue     go to state 65
    Arguments  go to state 97
    ListExp    go to state 74


State 79

   28 Exp: Exp • OR TB
   42 F: '(' Exp • ')'

    OR   shift, and go to state 81
    ')'  shift, and go to state 98


State 80

   41 F: '!' F •

    $default  reduce using rule 41 (F)


State 81

   28 Exp: Exp OR • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    TB      go to state 99
    FB      go to state 60
    M       go to state 61
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 82

   23 Instr: RETURN Exp ';' •

    $default  reduce using rule 23 (Instr)


State 83

   30 TB: TB AND • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    FB      go to state 100
    M       go to state 61
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 84

   32 FB: FB EQ • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    M       go to state 101
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 85

   34 M: M ORDER • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    E       go to state 102
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 86

   36 E: E ADDSUB • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    T       go to state 103
    F       go to state 64
    LValue  go to state 65


State 87

   38 T: T DIVSTAR • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    F       go to state 104
    LValue  go to state 65


State 88

   28 Exp: Exp • OR TB
   53 EnTeteSwitch: SWITCH '(' Exp • ')'

    OR   shift, and go to state 81
    ')'  shift, and go to state 105


State 89

   25 Instr: '{' SuiteInstr '}' •

    $default  reduce using rule 25 (Instr)


State 90

   18 Instr: LValue '=' Exp • ';'
   28 Exp: Exp • OR TB

    OR   shift, and go to state 81
    ';'  shift, and go to state 106


State 91

   55 CorpsSwitch: '{' '}' •

    $default  reduce using rule 55 (CorpsSwitch)


State 92

   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   21      | • WHILE '(' Exp ')' Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   26      | • ';'
   27      | • Switch
   47 LValue: • IDENT
   52 Switch: • EnTeteSwitch CorpsSwitch
   53 EnTeteSwitch: • SWITCH '(' Exp ')'
   54 CorpsSwitch: '{' SuiteSwitch • SwitchEndElement '}'
   56 SuiteSwitch: SuiteSwitch • SwitchElement
   58 SwitchElement: • CASE Exp ':'
   59              | • DEFAULT ':'
   60              | • BREAK ';'
   61              | • Instr
   62 SwitchEndElement: • BREAK ';'
   63                 | • Instr

    IDENT    shift, and go to state 35
    IF       shift, and go to state 36
    WHILE    shift, and go to state 37
    RETURN   shift, and go to state 38
    CASE     shift, and go to state 107
    BREAK    shift, and go to state 108
    SWITCH   shift, and go to state 39
    DEFAULT  shift, and go to state 109
    ';'      shift, and go to state 40
    '{'      shift, and go to state 41

    Instr             go to state 110
    LValue            go to state 44
    Switch            go to state 45
    EnTeteSwitch      go to state 46
    SwitchElement     go to state 111
    SwitchEndElement  go to state 112


State 93

   22 Instr: IDENT '(' Arguments ')' • ';'

    ';'  shift, and go to state 113


State 94

   28 Exp: • Exp OR TB
   29    | • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT
   50 ListExp: ListExp ',' • Exp

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp     go to state 114
    TB      go to state 59
    FB      go to state 60
    M       go to state 61
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 95

   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   19      | IF '(' Exp ')' • Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   20      | IF '(' Exp ')' • Instr ELSE Instr
   21      | • WHILE '(' Exp ')' Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   26      | • ';'
   27      | • Switch
   47 LValue: • IDENT
   52 Switch: • EnTeteSwitch CorpsSwitch
   53 EnTeteSwitch: • SWITCH '(' Exp ')'

    IDENT   shift, and go to state 35
    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    RETURN  shift, and go to state 38
    SWITCH  shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41

    Instr         go to state 115
    LValue        go to state 44
    Switch        go to state 45
    EnTeteSwitch  go to state 46


State 96

   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   21      | • WHILE '(' Exp ')' Instr
   21      | WHILE '(' Exp ')' • Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   26      | • ';'
   27      | • Switch
   47 LValue: • IDENT
   52 Switch: • EnTeteSwitch CorpsSwitch
   53 EnTeteSwitch: • SWITCH '(' Exp ')'

    IDENT   shift, and go to state 35
    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    RETURN  shift, and go to state 38
    SWITCH  shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41

    Instr         go to state 116
    LValue        go to state 44
    Switch        go to state 45
    EnTeteSwitch  go to state 46


State 97

   46 F: IDENT '(' Arguments • ')'

    ')'  shift, and go to state 117


State 98

   42 F: '(' Exp ')' •

    $default  reduce using rule 42 (F)


State 99

   28 Exp: Exp OR TB •  [OR, ')', ';', ',', ':']
   30 TB: TB • AND FB

    AND  shift, and go to state 83

    $default  reduce using rule 28 (Exp)


State 100

   30 TB: TB AND FB •  [OR, AND, ')', ';', ',', ':']
   32 FB: FB • EQ M

    EQ  shift, and go to state 84

    $default  reduce using rule 30 (TB)


State 101

   32 FB: FB EQ M •  [EQ, OR, AND, ')', ';', ',', ':']
   34 M: M • ORDER E

    ORDER  shift, and go to state 85

    $default  reduce using rule 32 (FB)


State 102

   34 M: M ORDER E •  [ORDER, EQ, OR, AND, ')', ';', ',', ':']
   36 E: E • ADDSUB T

    ADDSUB  shift, and go to state 86

    $default  reduce using rule 34 (M)


State 103

   36 E: E ADDSUB T •  [ADDSUB, ORDER, EQ, OR, AND, ')', ';', ',', ':']
   38 T: T • DIVSTAR F

    DIVSTAR  shift, and go to state 87

    $default  reduce using rule 36 (E)


State 104

   38 T: T DIVSTAR F •

    $default  reduce using rule 38 (T)


State 105

   53 EnTeteSwitch: SWITCH '(' Exp ')' •

    $default  reduce using rule 53 (EnTeteSwitch)


State 106

   18 Instr: LValue '=' Exp ';' •

    $default  reduce using rule 18 (Instr)


State 107

   28 Exp: • Exp OR TB
   29    | • TB
   30 TB: • TB AND FB
   31   | • FB
   32 FB: • FB EQ M
   33   | • M
   34 M: • M ORDER E
   35  | • E
   36 E: • E ADDSUB T
   37  | • T
   38 T: • T DIVSTAR F
   39  | • F
   40 F: • ADDSUB F
   41  | • '!' F
   42  | • '(' Exp ')'
   43  | • NUM
   44  | • CHARACTER
   45  | • LValue
   46  | • IDENT '(' Arguments ')'
   47 LValue: • IDENT
   58 SwitchElement: CASE • Exp ':'

    CHARACTER  shift, and go to state 51
    ADDSUB     shift, and go to state 52
    NUM        shift, and go to state 53
    IDENT      shift, and go to state 54
    '('        shift, and go to state 56
    '!'        shift, and go to state 57

    Exp     go to state 118
    TB      go to state 59
    FB      go to state 60
    M       go to state 61
    E       go to state 62
    T       go to state 63
    F       go to state 64
    LValue  go to state 65


State 108

   60 SwitchElement: BREAK • ';'
   62 SwitchEndElement: BREAK • ';'

    ';'  shift, and go to state 119


State 109

   59 SwitchElement: DEFAULT • ':'

    ':'  shift, and go to state 120


State 110

   61 SwitchElement: Instr •  [IDENT, IF, WHILE, RETURN, CASE, BREAK, SWITCH, DEFAULT, ';', '{']
   63 SwitchEndElement: Instr •  ['}']

    '}'       reduce using rule 63 (SwitchEndElement)
    $default  reduce using rule 61 (SwitchElement)


State 111

   56 SuiteSwitch: SuiteSwitch SwitchElement •

    $default  reduce using rule 56 (SuiteSwitch)


State 112

   54 CorpsSwitch: '{' SuiteSwitch SwitchEndElement • '}'

    '}'  shift, and go to state 121


State 113

   22 Instr: IDENT '(' Arguments ')' ';' •

    $default  reduce using rule 22 (Instr)


State 114

   28 Exp: Exp • OR TB
   50 ListExp: ListExp ',' Exp •  [')', ',']

    OR  shift, and go to state 81

    $default  reduce using rule 50 (ListExp)


State 115

   19 Instr: IF '(' Exp ')' Instr •  [IDENT, IF, WHILE, RETURN, CASE, BREAK, SWITCH, DEFAULT, ';', '{', '}']
   20      | IF '(' Exp ')' Instr • ELSE Instr

    ELSE  shift, and go to state 122

    $default  reduce using rule 19 (Instr)

    Conflict between rule 19 and token ELSE resolved as shift (')' < ELSE).


State 116

   21 Instr: WHILE '(' Exp ')' Instr •

    $default  reduce using rule 21 (Instr)


State 117

   46 F: IDENT '(' Arguments ')' •

    $default  reduce using rule 46 (F)


State 118

   28 Exp: Exp • OR TB
   58 SwitchElement: CASE Exp • ':'

    OR   shift, and go to state 81
    ':'  shift, and go to state 123


State 119

   60 SwitchElement: BREAK ';' •  [IDENT, IF, WHILE, RETURN, CASE, BREAK, SWITCH, DEFAULT, ';', '{']
   62 SwitchEndElement: BREAK ';' •  ['}']

    '}'       reduce using rule 62 (SwitchEndElement)
    $default  reduce using rule 60 (SwitchElement)


State 120

   59 SwitchElement: DEFAULT ':' •

    $default  reduce using rule 59 (SwitchElement)


State 121

   54 CorpsSwitch: '{' SuiteSwitch SwitchEndElement '}' •

    $default  reduce using rule 54 (CorpsSwitch)


State 122

   18 Instr: • LValue '=' Exp ';'
   19      | • IF '(' Exp ')' Instr
   20      | • IF '(' Exp ')' Instr ELSE Instr
   20      | IF '(' Exp ')' Instr ELSE • Instr
   21      | • WHILE '(' Exp ')' Instr
   22      | • IDENT '(' Arguments ')' ';'
   23      | • RETURN Exp ';'
   24      | • RETURN ';'
   25      | • '{' SuiteInstr '}'
   26      | • ';'
   27      | • Switch
   47 LValue: • IDENT
   52 Switch: • EnTeteSwitch CorpsSwitch
   53 EnTeteSwitch: • SWITCH '(' Exp ')'

    IDENT   shift, and go to state 35
    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    RETURN  shift, and go to state 38
    SWITCH  shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41

    Instr         go to state 124
    LValue        go to state 44
    Switch        go to state 45
    EnTeteSwitch  go to state 46


State 123

   58 SwitchElement: CASE Exp ':' •

    $default  reduce using rule 58 (SwitchElement)


State 124

   20 Instr: IF '(' Exp ')' Instr ELSE Instr •

    $default  reduce using rule 20 (Instr)
